"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HOI = exports.isPromise = exports.identityFunc = void 0;
/**
 * Identity function. Doubles as the noop func.
 * @param x
 */
const identityFunc = (x = {}) => x;
exports.identityFunc = identityFunc;
/**
 * Determine whether or not a variable is a promise.
 * @param x potential promise.
 */
function isPromise(x) {
    return x != undefined && typeof x === 'object' && 'then' in x && typeof x.then === 'function';
}
exports.isPromise = isPromise;
/**
 * **H**igher-**O**rder **I**dentity.
 *
 * A higher order factory for this very useful wrapper function.
 *
 * ```ts
 * // Enforce the type constraint *and* narrow the return type.
 * function defineThing<T extends Template>(definition: T): T {
 *     return definition;
 * }
 * ```
 *
 * The above `defineThing` can now be generated through
 *
 * ```ts
 * const defineThing = HOI<Template>();
 * ```
 *
 * Or in more advanced to define something like a catalog:
 *
 * ```ts
 * const defineThings = HOI<Record<string, Template>>();
 * ```
 */
const HOI = () => (definition) => definition;
exports.HOI = HOI;
//# sourceMappingURL=util.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.matchImpl = void 0;
const precepts_1 = require("./precepts");
function matchImpl(key) {
    // curryable wrapper around match.
    const prematch = (_) => (handler) => (instance) => match(instance, handler);
    function match(...args) {
        var _a, _b;
        if (args.length === 1) {
            // inline match
            const [handler] = args;
            return (instance) => match(instance, handler);
        }
        else if (args.length === 2) {
            // regular match
            const [instanceOrType, handlerParam] = args;
            const instance = typeof instanceOrType === 'string'
                ? ofLiteral(instanceOrType)
                : instanceOrType;
            // unpack handler from function if necessary.
            const handler = typeof handlerParam === 'function'
                ? handlerParam(instance)
                : handlerParam;
            if (instance != undefined && instance[key] in handler) {
                return (_a = handler[instance[key]]) === null || _a === void 0 ? void 0 : _a.call(handler, instance);
            }
            else if (precepts_1.DEFAULT_KEY in handler) {
                return (_b = handler[precepts_1.DEFAULT_KEY]) === null || _b === void 0 ? void 0 : _b.call(handler, instance);
            }
        }
    }
    const partial = (h) => () => h;
    const onLiteral = ofLiteral;
    function ofLiteral(instance) {
        return {
            [key]: instance,
        };
    }
    function lookup(handler) {
        const handlerWithFuncs = Object.keys(handler).reduce((acc, cur) => {
            return Object.assign(Object.assign({}, acc), { [cur]: () => handler[cur] });
        }, {});
        return _ => handlerWithFuncs;
    }
    function otherwise(branches, elseFunc) {
        return _ => (Object.assign(Object.assign({}, branches), { default: elseFunc }));
    }
    function withFallback(handler, fallback) {
        return _ => (Object.assign(Object.assign({}, handler), { default: fallback }));
    }
    return { match, ofLiteral, onLiteral, otherwise, partial, prematch, lookup, withFallback };
}
exports.matchImpl = matchImpl;
//# sourceMappingURL=match.js.map
import { TypeNames, VariantOf } from '..';
export declare const Animal: {
    cat: import("../precepts").VariantCreator<"cat", (input: {
        name: string;
        furnitureDamaged: number;
    }) => {
        name: string;
        furnitureDamaged: number;
    }, "type">;
    dog: import("../precepts").VariantCreator<"dog", (input: {
        name: string;
        favoriteBall?: string | undefined;
    }) => {
        name: string;
        favoriteBall?: string | undefined;
    }, "type">;
    snake: import("../precepts").VariantCreator<"snake", (name: string, pattern?: string) => {
        name: string;
        pattern: string;
    }, "type">;
};
export declare type Animal<T extends TypeNames<typeof Animal> = undefined> = VariantOf<typeof Animal, T>;
export declare const CapsAnimal: {
    cat: import("../precepts").VariantCreator<"CAT", (input: {
        name: string;
        furnitureDamaged: number;
    }) => {
        name: string;
        furnitureDamaged: number;
    }, "type">;
    dog: import("../precepts").VariantCreator<"DOG", (input: {
        name: string;
        favoriteBall?: string | undefined;
    }) => {
        name: string;
        favoriteBall?: string | undefined;
    }, "type">;
    snake: import("../precepts").VariantCreator<"SNAKE", (name: string, patternName?: string | undefined) => {
        name: string;
        pattern: string;
    }, "type">;
};
export declare type CapsAnimal<T extends TypeNames<typeof CapsAnimal> = undefined> = VariantOf<typeof CapsAnimal, T>;
export declare const sample: {
    cerberus: {
        type: "dog";
        name: string;
        favoriteBall?: string | undefined;
    };
    perseus: {
        type: "cat";
        name: string;
        furnitureDamaged: number;
    };
    STEVE: {
        type: "CAT";
        name: string;
        furnitureDamaged: number;
    };
};
//# sourceMappingURL=animal.d.ts.map
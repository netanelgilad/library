import { TypeNames, VariantOf } from '..';
export declare const Superpower: {
    Flight: import("../precepts").VariantCreator<"Flight", (input: {
        /**
         * Speed in meters / second.
         */
        speed: number;
        /**
         * Airtime in seconds.
         */
        stamina: number;
    }) => {
        /**
         * Speed in meters / second.
         */
        speed: number;
        /**
         * Airtime in seconds.
         */
        stamina: number;
    }, "type">;
    Invisibility: import("../precepts").VariantCreator<"Invisibility", (input: {
        /**
         * How their invisibility works.
         *
         * - **psychic** will fool people.
         * - **light manipulation** will fool cameras.
         */
        method: 'psychic' | 'light manipulation';
    }) => {
        /**
         * How their invisibility works.
         *
         * - **psychic** will fool people.
         * - **light manipulation** will fool cameras.
         */
        method: 'psychic' | 'light manipulation';
    }, "type">;
    Phasing: import("../precepts").VariantCreator<"Phasing", () => {}, "type">;
    Teleportation: import("../precepts").VariantCreator<"Teleportation", (input: {
        /**
         * Range in meters.
         */
        range: number;
    }) => {
        /**
         * Range in meters.
         */
        range: number;
    }, "type">;
};
export declare type Superpower<T extends TypeNames<typeof Superpower> = undefined> = VariantOf<typeof Superpower, T>;
export declare const Element: {
    fire: "fire";
    air: "air";
    water: "water";
    earth: "earth";
};
export declare type Element = keyof typeof Element;
//# sourceMappingURL=superpower.d.ts.map
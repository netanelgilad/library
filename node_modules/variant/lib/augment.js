"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.augment = void 0;
const type_1 = require("./type");
const variant_1 = require("./variant");
/**
 * Augment an existing variant model with new or overridden fields.
 *
 * @param variantDefinition a template for the variant, extends `RawVariant`, may be an existing variant.
 * @param f the augment function. This receives the object that is is augmenting, enabling calculated properties.
 * @tutorial
 * Use in conjunction with `variant` (or `variantModule`).
 *
 * ```typescript
 * // Add a timestamp to every action.
 * export const Action = variant(augment(
 *     {
 *         AddTodo: fields<{text: string, due?: number}>(),
 *         UpdateTodo: fields<{todoId: number, text?: string, due?: number, complete?: boolean}>(),
 *     },
 *     () => ({timestamp: Date.now()}),
 * ));
 * ```
 */
function augment(variantDefinition, f) {
    return Object.keys(variantDefinition).reduce((acc, key) => {
        let inputFunc = variantDefinition[key];
        let returnFunc = variant_1.isVariantCreator(inputFunc)
            ? type_1.variation(inputFunc.type, (...args) => {
                let result = inputFunc(...args);
                return Object.assign(Object.assign({}, f(result)), result);
            })
            : (...args) => {
                const branch = variantDefinition[key];
                let item = typeof branch === 'function' ? branch(...args) : {};
                return Object.assign(Object.assign({}, f(item)), item);
            };
        return Object.assign(Object.assign({}, acc), { [key]: returnFunc });
    }, {});
}
exports.augment = augment;
//# sourceMappingURL=augment.js.map
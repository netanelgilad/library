/**
 * Describe the fields of the variation.
 *
 * When used creates a function of type `(input: T) => T & {type: 'literal'}`
 * @param defaults set some default values for the object. Note this does *not* adjust the return type.
 */
export declare function fields<T extends {}>(defaults?: Partial<T>): (...args: {} extends T ? ([input: T] | []) : [input: T]) => T;
/**
 * Take a single variable of type T and store as 'payload'
 */
export declare function payload<T>(_example?: T): (payload: T) => {
    payload: T;
};
/**
 * Create an empty variation (`{type: 'literal'}`).
 */
export declare const nil: () => {};
//# sourceMappingURL=variant.tools.d.ts.map
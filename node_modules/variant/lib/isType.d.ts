import { VariantCreator, Func } from './precepts';
import { TypeStr } from './util';
export interface IsTypeFunc<K extends string> {
    /**
     * Check if an object is a variant of some type.
     * @param type any type string or variant creator
     * @returns A user-defined type guard indicating if the instance is of a given type.
     */
    isType<T extends (string | VariantCreator<string, Func, K>)>(type: T): <O extends Record<K, string>>(object: O) => object is Extract<O, Record<K, TypeStr<T, K>>>;
    /**
     * Check if an object is a variant of some type.
     * @param object an instance of an object
     * @param type any type string or variant creator
     * @returns A user-defined type guard indicating if the instance is of a given type.
     */
    isType<O extends Record<K, string>, T extends (O[K] | VariantCreator<O[K], Func, K>)>(object: O | null | undefined, type: T): object is Extract<O, Record<K, TypeStr<T, K>>>;
}
export declare function isTypeImpl<K extends string>(key: K): IsTypeFunc<K>;
//# sourceMappingURL=isType.d.ts.map
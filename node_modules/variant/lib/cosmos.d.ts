import { IsTypeFunc } from './isType';
import { MatchFuncs } from './match';
import { VariantFuncs } from './variant';
import { TypesFunc } from './types';
import { FlagsFunc } from './flags';
import { IsOfVariantFunc } from './isOfVariant';
import { RemoteFuncs } from './remote';
import { TypedFunc } from './typed';
import { MatcherFunc } from './matcher';
/**
 * All the functions in the library that pivot on a certain discriminant.
 */
export interface VariantCosmos<K extends string> extends IsOfVariantFunc<K>, IsTypeFunc<K>, FlagsFunc<K>, MatchFuncs<K>, MatcherFunc<K>, RemoteFuncs<K>, TypedFunc<K>, TypesFunc<K>, VariantFuncs<K> {
    key: K;
}
export interface VariantCosmosConfig<K extends string> {
    /**
     * The discriminant to be used by these functions.
     */
    key: K;
}
/**
 * Generate a series of functions to work off a given key.
 * @param config the key to use.
 * @template K discriminant as string literal.
 * @returns `VariantCosmos<K>`
 */
export declare function variantCosmos<K extends string>({ key }: VariantCosmosConfig<K>): VariantCosmos<K>;
//# sourceMappingURL=cosmos.d.ts.map